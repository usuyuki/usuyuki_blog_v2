#
# 本番用
# dc -f compose-prod.yml up -d --build
#
services:
  ghost:
    image: ghost:5-alpine
    restart: always
    environment:
      # see https://ghost.org/docs/config/#configuration-options
      # 恐ろしく脆弱なDB設定だがコンテナの外に出していないやつなので、これでOKとする
      database__client: mysql
      database__connection__host: db
      database__connection__user: root
      database__connection__password: example
      database__connection__database: ghost
      NODE_ENV: production
      url: ${BACKEND_API_URL}
    volumes:
      - ./backend:/var/lib/ghost/content
      - ./backend/config.production.json:/var/lib/ghost/config.production.json
    user: "1000:1000"
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "logging=promtail"
    networks:
      - app-network

  astro:
    image: ghcr.io/usuyuki/usuyuki_blog_v2_astro:latest
    # build:
    #   context: ./frontend
    #   dockerfile: ../infra/prod/astro/Dockerfile
    # ports:
    #   - "1000:1000"
    restart: always
    stdin_open: true
    tty: true
    environment:
      NODE_ENV: production
      GHOST_CONTENT_KEY: ${GHOST_CONTENT_KEY}
      GHOST_API_URL: ${GHOST_API_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      EXTERNAL_BLOGS: ${EXTERNAL_BLOGS}
      GHOST_FRONT_URL: ${BACKEND_API_URL}
      LOKI_URL: http://loki:3100
    user: "1000:1000"
    depends_on:
      - ghost
      - loki
    labels:
      - "logging=promtail"
    networks:
      - app-network

  db:
    image: mysql:8.0-debian
    restart: always
    volumes:
      - db-store:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: example
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - app-network

  tunnel:
    restart: always
    image: cloudflare/cloudflared
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
    depends_on:
      - ghost
      - astro
    networks:
      - app-network

  loki:
    image: grafana/loki:3.5
    restart: always
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:12.1.0
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      GRAFANA_BASE_URL: ${GRAFANA_BASE_URL:-http://localhost:1002}
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - app-network

  promtail:
    image: grafana/promtail:3.5
    restart: always
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - app-network

volumes:
  db-store:
  loki-data:
  grafana-storage:

networks:
  app-network:
    driver: bridge
