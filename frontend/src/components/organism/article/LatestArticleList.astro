---
import { ghostClient } from "~/libs/ghostClient";
import { convertGhostToArticle } from "~/libs/articleAggregator";
import errorHandler from "~/libs/errorHandler";

interface Props {
	ulClass?: string;
	liClass?: string;
}
const { ulClass = "", liClass = "" } = Astro.props;

const rawPosts = await ghostClient.posts
	.browse({
		limit: 5,
		order: "published_at DESC",
	})
	.catch((err: Error) => {
		errorHandler.handleComponentError("LatestArticleList", err);
	});

// 内部的にはnullableとして扱いたくないので変換
const posts = (rawPosts || []).map(convertGhostToArticle);
---

{
	posts && posts.length > 0 ? (
		<ul class={ulClass}>
			{posts.map((post) => (
				<li class={`text-lg my-2 ${liClass}`}>
					<a href={`/${post.slug}`}>📰{post.title}</a>
				</li>
			))}
		</ul>
	) : (
		<p>最近書いた記事はありません！</p>
	)
}
