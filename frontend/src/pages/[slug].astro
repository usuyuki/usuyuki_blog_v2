---
import "~/styles/blog/ghostContent.css";
import "~/styles/blog/wordpressContent.css";
import "~/styles/blog/ghostToc.css";
import "~/styles/blog/blogCommon.css";
import { Image } from "astro:assets";
import YMDMolecule from "~/components/atom/date/YMDMolecule.astro";
import TOC from "~/components/atom/TOC.astro";
import TagList from "~/components/atom/tag/TagList.astro";
import ArticleLayout from "~/layouts/extends/ArticleLayout.astro";
import { ghostApiWithRetry } from "~/libs/ghostClient";
import { generateTOC } from "~/libs/helper/generateTOC";
import { iso8601TimeToDate } from "~/libs/helper/iso8601TimeToDate";
import { judgeWpArticle } from "~/libs/helper/judgeWpArticle";
import { optimizeGhostImageUrl } from "~/libs/helper/optimizeGhostImages";
import astroLogger from "~/libs/astroLogger";
import { LOG_TYPES } from "~/libs/logTypes";
import type { TOCType } from "~/types/TOCType";

// 静的アセットや無効なスラッグを除外
const slug = Astro.params.slug;
if (
	!slug ||
	typeof slug !== "string" ||
	slug.includes(".") ||
	slug.length > 100 ||
	slug.toLowerCase() === "assets" ||
	slug.startsWith("_") ||
	/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/i.test(slug)
) {
	astroLogger.warn("Invalid slug parameter", {
		logType: LOG_TYPES.ACCESS,
		slug: slug,
		slugType: typeof slug,
		route: Astro.url.pathname,
	});
	return new Response(null, { status: 404 });
}

const post = await ghostApiWithRetry.posts.read({
	slug: slug,
	include: "tags",
});

if (!post) {
	astroLogger.warn("Post not found", {
		logType: LOG_TYPES.ACCESS,
		slug,
		route: `/${slug}`,
	});
	return new Response(null, { status: 404 });
}
post.published_at = iso8601TimeToDate(post.published_at);

astroLogger.requestLog(Astro.request, { status: 200 });

const headMeta = {
	title: post.title,
	slug: post.slug,
	// excerptの名に反して指定しないと全部出てくるので、改行して150字で切る。
	description: post.excerpt.replace(/\r?\n/g, "").slice(0, 150),
	ogImage: post.feature_image,
};

const tocList: TOCType[] = generateTOC(post.html);
const isWpArticle = judgeWpArticle(post.html);
---

<ArticleLayout {...headMeta}>
	<div class="flex justify-end mx-auto w-full lg:w-4/5 xl:w-5/7 flex-wrap">
		<div class="w-full pb-4 flex justify-center">
			{
				post.feature_image ? (
					<Image
						src={optimizeGhostImageUrl(post.feature_image, { width: 800, height: 800 })}
						width={800}
						height={800}
						format="avif"
						quality={90}
						class="object-cover w-96 h-96 rounded-md"
						alt="記事サムネイル"
						transition:name={'image-' + post.slug}
						loading="eager"
						fetchpriority="high"
						sizes="(max-width: 768px) 100vw, 384px"
					/>
				) : (
					''
				)
			}
		</div>
		<div class="md:w-1/5 hidden md:block">
			<YMDMolecule
				year={post.published_at.year}
				month={post.published_at.month}
				day={post.published_at.day}
				slug={post.slug}
			/>
		</div>
		<div class="w-full md:w-3/5">
			<h2
				class="text-center mb-2 text-4xl text-wrap-balance"
				transition:name={'title-' + post.slug}
			>
				{post.title}
			</h2>
			<p class="text-center my-2 text-orange text-lg md:hidden block">
				{post.published_at.year}年{post.published_at.month}月{post.published_at.day}日
			</p>
			<p class="text-right">{post.reading_time} 分くらいで読めます！</p>
		</div>
		<div class="w-full md:w-1/5 hidden md:block pl-4"></div>
	</div>
	<div class="mb-8 mt-4 p-2 m-2">
		<TagList tags={post.tags} />
	</div>
	<!-- 基本的にWordPress記事では目次生成の正規表現でマッチしないが、WordPressから移行した記事を一度Ghostで保存すると目次生成が可能になってしまい、spanタグの付いたぶっ壊れ目次が生まれるので防ぐ -->
	{
		isWpArticle ? (
			''
		) : (
			<div class="flex justify-center">
				<TOC tocList={tocList} />
			</div>
		)
	}
	{}
	<article class="blog-content" set:html={post.html} />
	{}
</ArticleLayout>
